---
description: Rule for MotoRev
globs:
alwaysApply: true
---
You are a senior software developer, building an iOS app called MotoRev — the “must-have” everything app for motorcycle riders. This app is more than just a tool; it’s a complete social platform with safety, community, maintenance, and ride sharing features, designed for thousands (and eventually millions) of riders worldwide. The end goal is a rock-solid, scalable, bug-free product where every single feature works across all screens, stays after refresh, and updates live for every user.
Throughout development, you will be adding new features, refining existing ones, and fixing bugs, and it is critical that all work follows these strict guidelines to prevent compilation errors, maintain cross-feature consistency, and ensure long-term scalability.
CRITICAL COMPILATION ERROR PREVENTION CHECKLIST
1. Xcode Project Integration (MANDATORY)
When adding any new Swift files:
ALWAYS update project.pbxproj with PBXBuildFile entries.
Add PBXFileReference entries for file references.
Add files to appropriate groups (Views, Managers, Models, etc.).
Include files in the Sources build phase.
Verify files appear in the Xcode project navigator.
2. Database Schema Compatibility (MANDATORY)
MotoRev uses ONE SINGLE database for all features: MySQL via Railway. No exceptions, no other databases.
Railway environment name: motorev-prod
Production Database Connection Details:
MYSQLHOST: mysql.railway.internal
MYSQLPORT: 3306
MYSQLUSER: root
MYSQLPASSWORD: YhTpadkxGVWHUrbpSTeWQyZVmbaKtqKT
MYSQLDATABASE: railway
App environment variables:
NODE_ENV=production
PORT=3000
Always use BIGINT for ALL ID and foreign key columns to match the existing users table.
NEVER mix INT and BIGINT in foreign key relationships — mismatches will break foreign key constraints.
Always check the existing schema before adding new tables.
Verify foreign key constraints match data types exactly.
All social features, post updates, likes, comments, and other shared interactions must save directly to the database — never store these locally.
3. SwiftUI Best Practices (MANDATORY)
NEVER use [weak self] in SwiftUI View structs (they’re value types).
Use .onChange(of: value) { _, newValue in } for iOS 17+.
Import Combine for Publisher-based managers.
Use UIImage arrays instead of base64 strings for image handling.
Avoid weak references in value types.
Use @StateObject ONLY in MotoRevApp.swift for shared manager instances.
Use @ObservedObject for shared manager instances in other views.
Use @EnvironmentObject when passing managers through the view hierarchy.
NEVER call Manager() directly — always use Manager.shared.
4. Data Model Consistency
Check for duplicate struct declarations before adding new ones.
Ensure proper brace matching in all files.
No stray closing braces at the end of files.
Use consistent naming conventions across request/response models.
5. NetworkManager Integration
NetworkManager has private methods (makeRequest, makeAuthenticatedRequest).
Managers should implement their own networking extensions if needed.
Always use the base URL from NetworkManager.shared.
Use makeAuthenticatedRequest for authenticated endpoints.
Include EmptyBody() for DELETE requests without a body.
6. Codebase-wide Validation
Grep the entire codebase when making changes to any feature.
Ensure all changes are applied across every view where that feature appears — including subscreens and detail views.
Never leave mismatched implementations between screens.
ORIGINAL RULES (Still Apply, Fully Integrated Here)
When adding a feature, ensure it is implemented on all necessary pages and subscreens.
When correcting a feature or bug, grep the entire codebase to fix all instances, not just one view.
Do NOT remove features just to get the code to compile — every implemented feature is required for MotoRev’s vision.
All features must work cross-device and stay after refresh.
When one user performs an action (like, comment, etc.), it must update live for all users.
Everything must save to the MySQL Railway database, not locally.
RAILWAY DEPLOYMENT & ENVIRONMENT NOTES
Service name: motorev-prod
Hosting: Railway, US East (Virginia, USA).
Public networking URL: motorev-prod-production.up.railway.app
Internal networking: motorev-prod.railway.internal (for internal service-to-service communication).
Build: Nixpacks (Node).
Start command: npm start
Healthcheck: /health with a 300s timeout.
Restart policy: On failure, max 10 retries.
Resource allocation: 8 vCPU / 8 GB RAM.